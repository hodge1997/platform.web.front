{"ast":null,"code":"var _jsxFileName = \"/Users/sha/Desktop/CollectPie_frontend/collectpie_flask/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport jwtDecode from 'jwt-decode'; // Correct default import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userEmail, setUserEmail] = useState('');\n  const [tokenExpirationTime, setTokenExpirationTime] = useState(null);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      const userInfo = decodeToken(token);\n      if (userInfo) {\n        const isTokenExpired = checkTokenExpiration(userInfo.exp);\n        if (isTokenExpired) {\n          removeExpiredToken(); // Remove expired token from localStorage\n          logout(); // Log out the user\n        } else {\n          setIsLoggedIn(true);\n          setUserEmail(userInfo.UserId);\n          setTokenExpirationTime(userInfo.exp * 1000); // Convert exp to milliseconds\n          scheduleAutoLogout(userInfo.exp * 1000); // Schedule automatic logout\n        }\n      } else {\n        console.error('Failed to decode token or token is invalid');\n        removeExpiredToken(); // Optional: clear invalid token\n        logout(); // Log out the user\n      }\n    }\n  }, []);\n  const login = (token, email) => {\n    const userInfo = decodeToken(token);\n    if (userInfo) {\n      localStorage.setItem('token', token);\n      setIsLoggedIn(true);\n      setUserEmail(email);\n      setTokenExpirationTime(userInfo.exp * 1000); // Set token expiration time in milliseconds\n      scheduleAutoLogout(userInfo.exp * 1000); // Schedule automatic logout\n    } else {\n      console.error('Failed to decode token on login');\n    }\n  };\n  const logout = () => {\n    removeExpiredToken(); // Remove the token from localStorage\n    setIsLoggedIn(false);\n    setUserEmail('');\n    setTokenExpirationTime(null);\n  };\n  const removeExpiredToken = () => {\n    localStorage.removeItem('token');\n  };\n  const decodeToken = token => {\n    try {\n      return jwtDecode(token); // Decodes the token and returns user information\n    } catch (e) {\n      console.error('Failed to decode token', e);\n      return null;\n    }\n  };\n  const checkTokenExpiration = exp => {\n    const currentTime = Date.now() / 1000; // Current time in seconds\n    return exp < currentTime; // Returns true if the token is expired\n  };\n  const scheduleAutoLogout = expirationTime => {\n    const timeoutDuration = expirationTime - Date.now();\n    setTimeout(() => {\n      logout();\n      console.warn('Token has expired, user has been logged out');\n    }, timeoutDuration);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      userEmail,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"QzCY3grW/oX25RlKwMHXLgFqFkc=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","jwtDecode","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isLoggedIn","setIsLoggedIn","userEmail","setUserEmail","tokenExpirationTime","setTokenExpirationTime","token","localStorage","getItem","userInfo","decodeToken","isTokenExpired","checkTokenExpiration","exp","removeExpiredToken","logout","UserId","scheduleAutoLogout","console","error","login","email","setItem","removeItem","e","currentTime","Date","now","expirationTime","timeoutDuration","setTimeout","warn","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/sha/Desktop/CollectPie_frontend/collectpie_flask/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport jwtDecode from 'jwt-decode'; // Correct default import\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userEmail, setUserEmail] = useState('');\n  const [tokenExpirationTime, setTokenExpirationTime] = useState(null);\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      const userInfo = decodeToken(token);\n      if (userInfo) {\n        const isTokenExpired = checkTokenExpiration(userInfo.exp);\n        if (isTokenExpired) {\n          removeExpiredToken(); // Remove expired token from localStorage\n          logout(); // Log out the user\n        } else {\n          setIsLoggedIn(true);\n          setUserEmail(userInfo.UserId);\n          setTokenExpirationTime(userInfo.exp * 1000); // Convert exp to milliseconds\n          scheduleAutoLogout(userInfo.exp * 1000); // Schedule automatic logout\n        }\n      } else {\n        console.error('Failed to decode token or token is invalid');\n        removeExpiredToken(); // Optional: clear invalid token\n        logout(); // Log out the user\n      }\n    }\n  }, []);\n\n  const login = (token, email) => {\n    const userInfo = decodeToken(token);\n    if (userInfo) {\n      localStorage.setItem('token', token);\n      setIsLoggedIn(true);\n      setUserEmail(email);\n      setTokenExpirationTime(userInfo.exp * 1000); // Set token expiration time in milliseconds\n      scheduleAutoLogout(userInfo.exp * 1000); // Schedule automatic logout\n    } else {\n      console.error('Failed to decode token on login');\n    }\n  };\n\n  const logout = () => {\n    removeExpiredToken(); // Remove the token from localStorage\n    setIsLoggedIn(false);\n    setUserEmail('');\n    setTokenExpirationTime(null);\n  };\n\n\n\n  const removeExpiredToken = () => {\n    localStorage.removeItem('token');\n  };\n\n\n  const decodeToken = (token) => {\n    try {\n      return jwtDecode(token); // Decodes the token and returns user information\n    } catch (e) {\n      console.error('Failed to decode token', e);\n      return null;\n    }\n  };\n\n  const checkTokenExpiration = (exp) => {\n    const currentTime = Date.now() / 1000; // Current time in seconds\n    return exp < currentTime; // Returns true if the token is expired\n  };\n\n  const scheduleAutoLogout = (expirationTime) => {\n    const timeoutDuration = expirationTime - Date.now();\n    setTimeout(() => {\n      logout();\n      console.warn('Token has expired, user has been logged out');\n    }, timeoutDuration);\n  };\n\n  return (\n    <AuthContext.Provider value={{ isLoggedIn, userEmail, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7E,OAAOC,SAAS,MAAM,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpC,OAAO,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACc,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAEpEC,SAAS,CAAC,MAAM;IACd,MAAMe,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACT,MAAMG,QAAQ,GAAGC,WAAW,CAACJ,KAAK,CAAC;MACnC,IAAIG,QAAQ,EAAE;QACZ,MAAME,cAAc,GAAGC,oBAAoB,CAACH,QAAQ,CAACI,GAAG,CAAC;QACzD,IAAIF,cAAc,EAAE;UAClBG,kBAAkB,CAAC,CAAC,CAAC,CAAC;UACtBC,MAAM,CAAC,CAAC,CAAC,CAAC;QACZ,CAAC,MAAM;UACLd,aAAa,CAAC,IAAI,CAAC;UACnBE,YAAY,CAACM,QAAQ,CAACO,MAAM,CAAC;UAC7BX,sBAAsB,CAACI,QAAQ,CAACI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;UAC7CI,kBAAkB,CAACR,QAAQ,CAACI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;QAC3C;MACF,CAAC,MAAM;QACLK,OAAO,CAACC,KAAK,CAAC,4CAA4C,CAAC;QAC3DL,kBAAkB,CAAC,CAAC,CAAC,CAAC;QACtBC,MAAM,CAAC,CAAC,CAAC,CAAC;MACZ;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,KAAK,GAAGA,CAACd,KAAK,EAAEe,KAAK,KAAK;IAC9B,MAAMZ,QAAQ,GAAGC,WAAW,CAACJ,KAAK,CAAC;IACnC,IAAIG,QAAQ,EAAE;MACZF,YAAY,CAACe,OAAO,CAAC,OAAO,EAAEhB,KAAK,CAAC;MACpCL,aAAa,CAAC,IAAI,CAAC;MACnBE,YAAY,CAACkB,KAAK,CAAC;MACnBhB,sBAAsB,CAACI,QAAQ,CAACI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;MAC7CI,kBAAkB,CAACR,QAAQ,CAACI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;IAC3C,CAAC,MAAM;MACLK,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAC;IAClD;EACF,CAAC;EAED,MAAMJ,MAAM,GAAGA,CAAA,KAAM;IACnBD,kBAAkB,CAAC,CAAC,CAAC,CAAC;IACtBb,aAAa,CAAC,KAAK,CAAC;IACpBE,YAAY,CAAC,EAAE,CAAC;IAChBE,sBAAsB,CAAC,IAAI,CAAC;EAC9B,CAAC;EAID,MAAMS,kBAAkB,GAAGA,CAAA,KAAM;IAC/BP,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC;EAGD,MAAMb,WAAW,GAAIJ,KAAK,IAAK;IAC7B,IAAI;MACF,OAAOb,SAAS,CAACa,KAAK,CAAC,CAAC,CAAC;IAC3B,CAAC,CAAC,OAAOkB,CAAC,EAAE;MACVN,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEK,CAAC,CAAC;MAC1C,OAAO,IAAI;IACb;EACF,CAAC;EAED,MAAMZ,oBAAoB,GAAIC,GAAG,IAAK;IACpC,MAAMY,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IACvC,OAAOd,GAAG,GAAGY,WAAW,CAAC,CAAC;EAC5B,CAAC;EAED,MAAMR,kBAAkB,GAAIW,cAAc,IAAK;IAC7C,MAAMC,eAAe,GAAGD,cAAc,GAAGF,IAAI,CAACC,GAAG,CAAC,CAAC;IACnDG,UAAU,CAAC,MAAM;MACff,MAAM,CAAC,CAAC;MACRG,OAAO,CAACa,IAAI,CAAC,6CAA6C,CAAC;IAC7D,CAAC,EAAEF,eAAe,CAAC;EACrB,CAAC;EAED,oBACElC,OAAA,CAACC,WAAW,CAACoC,QAAQ;IAACC,KAAK,EAAE;MAAEjC,UAAU;MAAEE,SAAS;MAAEkB,KAAK;MAAEL;IAAO,CAAE;IAAAjB,QAAA,EACnEA;EAAQ;IAAAoC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACtC,EAAA,CAlFWF,YAAY;AAAAyC,EAAA,GAAZzC,YAAY;AAoFzB,OAAO,MAAM0C,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAOhD,UAAU,CAACI,WAAW,CAAC;AAChC,CAAC;AAAC4C,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}