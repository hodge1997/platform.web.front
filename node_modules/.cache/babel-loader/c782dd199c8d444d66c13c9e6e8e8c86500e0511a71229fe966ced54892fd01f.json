{"ast":null,"code":"const handleGoogleLoginClick = () => {\n  console.log('Opening Google login popup');\n  const popup = window.open('https://cp.dhytv.com/v1/google/sign-in', 'google-login', `width=600,height=600,top=${window.screen.height / 2 - 300},left=${window.screen.width / 2 - 300}`);\n  if (!popup || popup.closed || typeof popup.closed === 'undefined') {\n    console.error('Popup was blocked');\n    toast.error('Popup was blocked. Please allow popups for this site.');\n  } else {\n    console.log('Popup opened successfully');\n  }\n};\nconst handleMessage = useCallback(async event => {\n  console.log('Message received:', event);\n  console.log('Message origin:', event.origin);\n  console.log('Expected origin:', window.location.origin);\n  if (event.origin !== window.location.origin) {\n    console.log('Origin mismatch, expected:', window.location.origin);\n    return;\n  }\n  console.log('Message data:', event.data);\n  const {\n    token\n  } = event.data;\n  if (token) {\n    console.log('Token received:', token);\n    try {\n      const response = await fetch('https://cp.dhytv.com/v1/google/validate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token\n        })\n      });\n      console.log('Validation response:', response);\n      await handleLoginResponse(response);\n    } catch (error) {\n      console.error('Error during Google login:', error);\n      toast.error('An error occurred during Google login. Please try again.');\n    }\n  } else {\n    console.log('No token found in the message');\n  }\n}, []);\nuseEffect(() => {\n  console.log('Adding message event listener');\n  window.addEventListener('message', handleMessage);\n  return () => {\n    console.log('Removing message event listener');\n    window.removeEventListener('message', handleMessage);\n  };\n}, [handleMessage]);","map":{"version":3,"names":["handleGoogleLoginClick","console","log","popup","window","open","screen","height","width","closed","error","toast","handleMessage","useCallback","event","origin","location","data","token","response","fetch","method","headers","body","JSON","stringify","handleLoginResponse","useEffect","addEventListener","removeEventListener"],"sources":["/Users/sha/Desktop/CollectPie_frontend/collectpie_flask/src/components/LoginPage/LoginPage.js"],"sourcesContent":["const handleGoogleLoginClick = () => {\n  console.log('Opening Google login popup');\n  const popup = window.open(\n    'https://cp.dhytv.com/v1/google/sign-in',\n    'google-login',\n    `width=600,height=600,top=${window.screen.height / 2 - 300},left=${window.screen.width / 2 - 300}`\n  );\n  if (!popup || popup.closed || typeof popup.closed === 'undefined') {\n    console.error('Popup was blocked');\n    toast.error('Popup was blocked. Please allow popups for this site.');\n  } else {\n    console.log('Popup opened successfully');\n  }\n};\n\nconst handleMessage = useCallback(async (event) => {\n  console.log('Message received:', event);\n  console.log('Message origin:', event.origin);\n  console.log('Expected origin:', window.location.origin);\n\n  if (event.origin !== window.location.origin) {\n    console.log('Origin mismatch, expected:', window.location.origin);\n    return;\n  }\n\n  console.log('Message data:', event.data);\n  const { token } = event.data;\n\n  if (token) {\n    console.log('Token received:', token);\n    try {\n      const response = await fetch('https://cp.dhytv.com/v1/google/validate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ token }),\n      });\n      console.log('Validation response:', response);\n      await handleLoginResponse(response);\n    } catch (error) {\n      console.error('Error during Google login:', error);\n      toast.error('An error occurred during Google login. Please try again.');\n    }\n  } else {\n    console.log('No token found in the message');\n  }\n}, []);\n\nuseEffect(() => {\n  console.log('Adding message event listener');\n  window.addEventListener('message', handleMessage);\n  return () => {\n    console.log('Removing message event listener');\n    window.removeEventListener('message', handleMessage);\n  };\n}, [handleMessage]);"],"mappings":"AAAA,MAAMA,sBAAsB,GAAGA,CAAA,KAAM;EACnCC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;EACzC,MAAMC,KAAK,GAAGC,MAAM,CAACC,IAAI,CACvB,wCAAwC,EACxC,cAAc,EACd,4BAA4BD,MAAM,CAACE,MAAM,CAACC,MAAM,GAAG,CAAC,GAAG,GAAG,SAASH,MAAM,CAACE,MAAM,CAACE,KAAK,GAAG,CAAC,GAAG,GAAG,EAClG,CAAC;EACD,IAAI,CAACL,KAAK,IAAIA,KAAK,CAACM,MAAM,IAAI,OAAON,KAAK,CAACM,MAAM,KAAK,WAAW,EAAE;IACjER,OAAO,CAACS,KAAK,CAAC,mBAAmB,CAAC;IAClCC,KAAK,CAACD,KAAK,CAAC,uDAAuD,CAAC;EACtE,CAAC,MAAM;IACLT,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;EAC1C;AACF,CAAC;AAED,MAAMU,aAAa,GAAGC,WAAW,CAAC,MAAOC,KAAK,IAAK;EACjDb,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEY,KAAK,CAAC;EACvCb,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEY,KAAK,CAACC,MAAM,CAAC;EAC5Cd,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEE,MAAM,CAACY,QAAQ,CAACD,MAAM,CAAC;EAEvD,IAAID,KAAK,CAACC,MAAM,KAAKX,MAAM,CAACY,QAAQ,CAACD,MAAM,EAAE;IAC3Cd,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEE,MAAM,CAACY,QAAQ,CAACD,MAAM,CAAC;IACjE;EACF;EAEAd,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEY,KAAK,CAACG,IAAI,CAAC;EACxC,MAAM;IAAEC;EAAM,CAAC,GAAGJ,KAAK,CAACG,IAAI;EAE5B,IAAIC,KAAK,EAAE;IACTjB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEgB,KAAK,CAAC;IACrC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;QACtEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEP;QAAM,CAAC;MAChC,CAAC,CAAC;MACFjB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEiB,QAAQ,CAAC;MAC7C,MAAMO,mBAAmB,CAACP,QAAQ,CAAC;IACrC,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdT,OAAO,CAACS,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDC,KAAK,CAACD,KAAK,CAAC,0DAA0D,CAAC;IACzE;EACF,CAAC,MAAM;IACLT,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAC9C;AACF,CAAC,EAAE,EAAE,CAAC;AAENyB,SAAS,CAAC,MAAM;EACd1B,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAC5CE,MAAM,CAACwB,gBAAgB,CAAC,SAAS,EAAEhB,aAAa,CAAC;EACjD,OAAO,MAAM;IACXX,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAC9CE,MAAM,CAACyB,mBAAmB,CAAC,SAAS,EAAEjB,aAAa,CAAC;EACtD,CAAC;AACH,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}